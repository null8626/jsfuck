/// # jsfuck
/// A quick and simple JSFuck obfuscator for Rust. For more info/context, visit [www.jsfuck.com](http://www.jsfuck.com).
/// 
/// ## Example
/// ```rs
/// use jsfuck;
/// 
/// fn main() {
///     let jsfucked = jsfuck::obfuscate("0");
///     
///     // evaluate this as a JavaScript code and you should get "0"
///     assert_eq!("[+[]]", jsfucked);
///     
///     let mut code = jsfuck::obfuscate("console.log('Hello, World!')");
/// 
///     // wrap this with an eval()
///     jsfuck::wrap_eval(&mut code);
///     
///     // paste this as a JavaScript code and it should print "Hello, World!"
///     println!("{}", code);
/// }
/// ```

mod token;
use token::Tokenizer;

const JSFUCK_EVAL_WRAP: &str

/// Obfuscates the string, turning it to a valid JavaScript code.
/// Evaluating this should output the input as a string.
pub fn obfuscate(input: &str) -> String {
    let mut output = String::new();
    
    if input.len() == 0 {
        return output;
    }
    
    let mut tokenizer = Tokenizer::new(input);
    tokenizer.parse(&mut output);
    
    output
}

/// Wraps the code returned from `jsfuck::obsfuscate` with a pre-jsfucked `eval()` call.
/// Evaluating this should execute the code from the input. (e.g: `console.log('Hello, World!')`)
pub fn wrap_eval(input: &mut String) {
    input.insert_str(0, JSFUCK_EVAL_WRAP);
    input.push(')');
}